<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!--项目名称-->
    <contextName>community</contextName>
    <!--日志文件存放的一级目录，指定日志存放的总位置-->
    <property name="LOG_PATH" value="D:/work/data"/>
    <!--日志文件存放的二级目录，通过项目名区分多个项目（模块）的日志-->
    <property name="APPDIR" value="community"/>

    <!-- error file -->
    <!--只有ERROR级别的日志会被记录到指定的日志文件中，并且文件会按照日期进行滚动拆分，每天生成一个新的日志文件，同时保留过去30天的日志文件历史记录。-->
    <appender name="FILE_ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--日志文件存放目录及文件名-->
        <file>${LOG_PATH}/${APPDIR}/log_error.log</file>
        <!--滚动策略，表示拆分出来的日志相关策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/${APPDIR}/error/log-error-%d{yyyy-MM-dd}.%i.log</fileNamePattern><!--设置滚动后的日志文件存放位置和名称-->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"><!--最大日志文件的大小5M-->
                <maxFileSize>5MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>30</maxHistory><!--最大存储时间-->
        </rollingPolicy>
        <!--以追加形式存储日志，而不是覆盖，这是比较合理的-->
        <append>true</append>
        <!--配置日志的编码格式和输出格式。-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d %level [%thread] %logger{10} [%file:%line] %msg%n</pattern> <!--日志输出的格式-->
            <charset>utf-8</charset> <!--日志输出的编码，支持中文-->
        </encoder>
        <!--配置日志过滤器，用于控制哪些日志级别会被记录。-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>error</level> <!--error级别的日志会被记录-->
            <onMatch>ACCEPT</onMatch> <!--匹配则记录-->
            <onMismatch>DENY</onMismatch> <!--不匹配则不记录-->
        </filter>
    </appender>

    <!-- warn file -->
    <appender name="FILE_WARN" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/${APPDIR}/log_warn.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/${APPDIR}/warn/log-warn-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>5MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <append>true</append>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d %level [%thread] %logger{10} [%file:%line] %msg%n</pattern>
            <charset>utf-8</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>warn</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- info file -->
    <appender name="FILE_INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/${APPDIR}/log_info.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/${APPDIR}/info/log-info-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>5MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <append>true</append>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d %level [%thread] %logger{10} [%file:%line] %msg%n</pattern>
            <charset>utf-8</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>info</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- console -->
    <!--使用Logback日志框架将日志打印到控制台的配置-->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder> <!--日志格式及编码-->
            <pattern>%d %level [%thread] %logger{10} [%file:%line] %msg%n</pattern>
            <charset>utf-8</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter"> <!--过滤器-->
            <level>debug</level>
        </filter>
    </appender>


    <!--针对指定包配置，单独指定日志级别-->
    <logger name="com.nowcoder.community" level="debug"/> <!--单独声明该包下的日志级别为debug-->

    <!--全局配置-->
    <!--将根日志记录器的日志级别设置为info。这意味着只有info级别及以上的日志消息才会被记录，而低于info级别的调试信息（例如debug级别）将不会记录。-->
    <root level="info">
        <!--启用上述的几个appender组件，表示记录几个级别的日志到不同的文件中，具体appender配置见上述组件-->
        <appender-ref ref="FILE_ERROR"/><!--将FILE_ERROR这个appender附加到根日志记录器上。-->
        <appender-ref ref="FILE_WARN"/><!--将FILE_WARN这个appender附加到根日志记录器上-->
        <appender-ref ref="FILE_INFO"/><!--将FILE_INFO这个appender附加到根日志记录器上-->
        <appender-ref ref="STDOUT"/><!--将STDOUT这个appender附加到根日志记录器上，用于在控制台输出日志消息。-->
    </root>

</configuration>