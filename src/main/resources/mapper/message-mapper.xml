<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nowcoder.community.dao.MessageMapper">

    <sql id="selectFields">
        id, from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <sql id="insertFields">
        from_id, to_id, conversation_id, content, status, create_time
    </sql>


    <!--==============================================================================
        查询message
     ================================================================================-->
    <!--获取最近的对话列表，其中每个对话都包含最新的消息。返回的结果将按照最新消息的ID降序排列，并根据指定的偏移量和行数进行分页。-->
    <!--子查询用于选择每个会话中的最新消息。
    它找到具有以下条件的消息：状态不等于2，发送者不等于1，并且发送者ID或接收者ID等于给定的用户ID（通过参数#{userId}传递）。
    子查询使用GROUP BY语句按会话ID分组，并选择每个组中具有最大ID的消息。-->
    <select id="selectConversations" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where id in (
            select max(id) from message
            where status != 2
            and from_id != 1
            and (from_id = #{userId} or to_id = #{userId})
            group by conversation_id
        )
        order by id desc
        limit #{offset}, #{limit}
    </select>

    <!--该查询用于根据特定条件获取特定用户的对话数量。-->
    <select id="selectConversationCount" resultType="java.lang.Integer">
        select count(m.maxid) from (
            select max(id) as maxid from message
            where status != 2
            and from_id != 1
            and (from_id = #{userId} or to_id = #{userId})
            group by conversation_id
        ) as m
    </select>

    <!--查询某个会话conversation包含的私信列表，需要分页-->
    <!--ps:一个会话conversation包含多个私信letter-->
    <select id="selectLetters" resultType="com.nowcoder.community.entity.Message">
        select <include refid="selectFields"></include>
        from message
        where status != 2
        and from_id != 1
        and conversation_id = #{conversationId}
        order by id desc
        limit #{offset}, #{limit}
    </select>

    <!--查询某个会话所包含的私信数量--><!--查数量不需要分页-->
    <select id="selectLetterCount" resultType="java.lang.Integer">
        select count(id)
        from message
        where status != 2
        and from_id != 1
        and conversation_id = #{conversationId}
    </select>

    <!--查询未读私信数量-->
    <!--这里需要查总的未读私信数量，或者某个会话的未读私信数量，所以需要动态拼接sql-->
    <select id="selectLetterUnreadCount" resultType="java.lang.Integer">
        select count(id)
        from message
        where status = 0
        and from_id != 1
        and to_id = #{userId}
        <if test="conversationId!=null">
            and conversation_id = #{conversationId}
        </if>

    </select>

    <!--==============================================================================
        修改message
     ================================================================================-->
    <!--新增消息-->
    <insert id="insertMessage" parameterType="Message" keyProperty="id">
        insert into message(<include refid="insertFields"></include>)
        values (#{fromId},#{toId},#{conversationId},#{content},#{status},#{createTime})
    </insert>

    <!--（批量）修改消息的状态--> <!--mybatis中foreach的写法，详见官方文档。这里不小心遗漏item="id"导致错误-->
    <update id="updateStatus">
        update message set status = #{status}
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <!--查询某个主题下最新的通知-->
    <select id="selectLatestNotice" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where id in (
            select max(id) from message
            where status != 2
            and from_id = 1
            and to_id = #{userId}
            and conversation_id = #{topic}
        )
    </select>

    <!--查询某个主题下通知的数量-->
    <select id="selectNoticeCount" resultType="int">
        select count(id) from message
        where status != 2
        and from_id = 1
        and to_id = #{userId}
        and conversation_id = #{topic}
    </select>

    <!--查询未读的通知的数量--> <!--status 0已读，1未读，2失效-->
    <!--业务需求上，既需要查某个主题的未读消息数量，也需要查询所有主题的未读消息数量，两个解决方案：-->
    <!--1.多次查询某个主题的未读消息数量，相加得到总数量；2.动态sql，当需要查询某个主题时，限定查询条件为某个特定主题。-->
    <!--在 MyBatis 中，<if> 标签的内容会被解析为条件表达式，并根据条件的真假动态生成 SQL 查询语句的一部分。这样可以根据不同的条件灵活地构建查询语句。-->
    <select id="selectNoticeUnreadCount" resultType="int">
        select count(id) from message
        where status = 0
        and from_id = 1
        and to_id = #{userId}
        <if test="topic!=null">
            and conversation_id = #{topic}
        </if>
    </select>
</mapper>