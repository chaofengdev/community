<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nowcoder.community.dao.UserMapper">


    <!--提炼出的字段，可以复用这一大段字段-->
    <sql id = "insertFields" >
        username, password, salt, email, type, status, activation_code, header_url, create_time
    </sql>
    <sql id = "selectFields" >
        id, username, password, salt, email, type, status, activation_code, header_url, create_time
    </sql>

    <!--id对应mapper中的方法名，resultType应该是全限定名，但因为在application.properties中配置了type-aliases-package，可以缺省表对应实体类的包名-->
    <select id="selectById" resultType="User">
        select <include refid="selectFields"></include>
        from user
        where id = #{id}
    </select>

    <select id="selectByName" resultType="User">
        select <include refid="selectFields"></include>
        from user
        where username = #{username}
    </select>

    <select id="selectByEmail" resultType="User">
        select <include refid="selectFields"></include>
        from user
        where email = #{email}
    </select>

    <!--useGeneratedKeys="true" keyProperty="id" 当我们使用了这两个属性，就可以在插入对象后，将自增的id值在返回给插入的对象-->
    <!--返回的是影响的行数，不需要声明参数类型-->
    <insert id = "insertUser" parameterType="User" keyProperty="id">
        insert into user (<include refid="insertFields"></include> )
        values (#{username}, #{password}, #{salt}, #{email}, #{type}, #{status}, #{activationCode}, #{headerUrl}, #{createTime})
    </insert>

    <update id = "updateStatus">
        update user
        set status = #{status}
        where id = #{id}
    </update>

    <update id = "updateHeader">
        update user
        set header_url = #{headerUrl}
        where id = #{id}
    </update>

    <update id = "updatePassword">
        update user
        set password = #{password}
        where id = #{id}
    </update>

</mapper>